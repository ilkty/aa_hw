min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct(today()," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day
prices_day_equity
head(prices_day_equity)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
head(acwi)
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31") %>%
ggpot(aes(date, value))
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31") %>%
ggplot(aes(date, value))
rlang::last_error()
rlang::last_trace()
acwi
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct(today()," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
min = as.POSIXct("2008-01-02","%Y-%m-%d")
warnings()
max = as.POSIXct(today()," %Y-%m-%d")
acwi %>% filter(date >= min & date <= max)
max = as.POSIXct("2019-12-31"," %Y-%m-%d")
acwi %>% filter(date >= min & date <= max)
library(data.table)
install.packages("data.table")
library(data.table)
data(session)
head(session)
install.packages("reconstructr")
library(reconstructr)
data("session_dataset")
View(session_dataset)
data("session")
data()
library(data.table)
data(data.table)
data("data.table")
library(session)
install.packages("session")
data(session)
data(session::capture())
data(dplyr::session)
session_dataset
session::save.session()
summary(sseion)
summary(session_dataset)
session
save.image()
demo
demo()
demo(error.catching)
demo(nlm)
data(session)
install.packages("session")
data(session)
data(session)
data("session")
shiny::runApp()
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
data()
data(map)
library(datasets)
?sleep
?session
data(package = .packages(all.available = TRUE))
t.test()
??t.test
?t.test
source(spread_trading_signal.r)
source("spread_trading_signal.r")
source("spread_trading_signals.r")
getwd()
search()
calculate_spread <- function(x,y,beta){
return(y - beta * x)
}
source('~/hw_asset_allocation/ac_assets/spread_trading_signals.R', encoding = 'UTF-8', echo=TRUE)
source('~/hw_asset_allocation/ac_assets/spread_trading_signals.R', encoding = 'UTF-8', echo=TRUE)
install.packages("fpp2")
source('~/hw_asset_allocation/ac_assets/spread_trading_signals.R', encoding = 'UTF-8', echo=TRUE)
equity_monthly <- readRDS("equity_compact.RDS")
View(equity_monthly)
source('~/hw_asset_allocation/ac_assets/spread_trading_signals.R', encoding = 'UTF-8', echo=TRUE)
summary(equity_monthly)
head(equity_monthly)
equity_monthly <- to.monthly(equity_monthly)
x <- equity_monthly[,3][range]
y <- equity_monthly[,2][range]
dF <-cbind(x,y)
names(dF) <- c("x","y")
## beta 계산
betas <- rolling_beta(diff(dF), 10)
data <- merge(betas, dF)
data$spread <- data$x - lag(betas, 1) + data$x
## beta 수익률로 계산
returns <- diff(dF) / dF
data <- merge(betas, dF)
data$spread <- data$x - lag(betas, 1) + data$x
data
str(data)
class(data)
dim(data)
data$x
data$spread <- data$x - lag(betas, 1) + data$x
data <- merge(betas, dF) %>% na.omit
data$spread <- data$x - lag(betas, 1) + data$x
data
data$spread <- data$x - lag(betas, 1) + data$x
betas
## beta 계산
betas <- rolling_beta(diff(dF), 10)  %>% na.omit
data <- merge(betas, dF) %>% na.omit
data$spread <- data$x - lag(betas, 1) + data$x
betas
data
data$spread <- data$x - lag(betas, 1) + data$x
lag(betas, 1)
lag(betas)
betas
str(betas)
class(betas)
data$spread <- data$x - lag(betas, 1) + data$x
data$spread <- data$x - lag(betas, 1)*data$x
## beta 계산
betas <- rolling_beta(diff(dF), 10)
data <- merge(betas, dF)
data$spread <- data$x - lag(betas, 1) - data$x
lag(betas, 1)
plot(results$spread, ylab = "Spread Value",
main = "DM - beta*EM")
## ver. 001 ###########################################
results_in <- calculate_beta_level(x,y,start_date,end_date)
plot(results$spread, ylab = "Spread Value",
main = "DM - beta*EM")
results_in
plot(results_in$spread, ylab = "Spread Value",
main = "DM - beta*EM")
## out of sample test #######################
start_date_out_sample <- "2014-01-02"
end_date_out_sample <- "2015-01-01"
range <- paste(start_date_out_sample, "::", end_date_out_sample, sep = "")
spread_out_of_sample <- calculate_spread(x[range], y[range], results$beta)
spread_out_of_sample <- calculate_spread(x[range], y[range], results_in$beta)
summary(spread_out_of_sample)
spread_out_of_sample
example()
examples()
examples("01_hello")
library(shiny)
examples("01_hello")
runApp('~/R/win-library/4.0/shiny/examples/01_hello')
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('~/R/win-library/4.0/shiny/examples/01_hello')
# Create Shiny app ----
shinyApp(ui = ui, server = server)
shiny::runExample()
shiny::runExample("02_reactivy")
shiny::runExample("02_reactivity")
shiny::runExample("03_reactivity")
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
acwi
head(acwi)
acwi %>% filter(acwi$date >= 2008-01-02 )
acwi %>% filter(acwi$date >= "2008-06-02" )
dim(acwi)
acwi$Index
acwi %>% filter(acwi$Index >= "2008-06-02" )
acwi %>% filter(acwi$Index >= "2008-06-02" & acwi$Index <="2008-06-10")
min = as.POSIXct("2008-01-02","%Y-%m-%d")
min
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
input$trajectory[1]
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
plot(acwi)
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
renderPrint(input$trajectory[1])
output$lines <- renderPlot({
acwi %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
plot(acwi)
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2019-12-31"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
renderPrint(input$trajectory[1])
}
shinyApp(ui = ui, server = server)
shiny::runExample("")
shiny::runExample("05_slider")
shiny::runExample("05_sliders")
shiny::runExample("04_mpg")
shiny::runExample("03_reactivity")
install.packages("readxl")
runApp('ex_dateSlider.R')
runApp('ex_dateSlider.R')
df <- data.frame(Date = c("30/09/2018", "30/06/2018", "31/03/2018", "31/12/2017", "30/09/2017", "30/06/2017",
"31/03/2017", "30/09/2018", "30/06/2018", "31/03/2018", "31/12/2017", "30/09/2017", "30/06/2017",
"31/03/2017"),
Stock = c(rep("AAA", 7), rep("BBB", 7)),
Value = c(5.1, 5.2, 5.6, 5.5, 5.6, 5.7, 5.6, 6.4, 6.9, 6.7, 7.2, 7.2, 7.2, 7.7))
df$Date <- as.Date(df$Date, format = "%d/%m/%Y")
df$Stock <- as.character(df$Stock)
df
equity_monthly
prices_day_equity
head(prices_day_equity)
str(df)
str(prices_day_equity)
str(as.data.frame(prices_day_equity))
shiny::runExample("")
shiny::runExample("06_tabset")
shiny::runExample("06_tabsets")
library(TTR)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
#sliderInput()
start_date <- "2019-10-01"
end_date <- "2019-12-31"
# start_date랑 end_date를 input으로 받아야지
time_range <- paste(start_date, "::", end_date, sep = "")
print(time_range)
prices_day_equity <- prices_day_equity[time_range]
rsi5 <- RSI(prices_day_equity$`MSCI ACWI`, n = 5)
rsi10 <- RSI(prices_day_equity$`MSCI ACWI`, n = 10)
rsi15 <- RSI(prices_day_equity$`MSCI ACWI`, n = 15)
rsi20 <- RSI(prices_day_equity$`MSCI ACWI`, n = 20)
par(mfrow = c(2, 2))
plot(rsi, main = "RSI 5 days", xlab = "time", ylab = "RSI: 5days")
plot(rsi, main = "RSI 10 days", xlab = "time", ylab = "RSI: 10days")
plot(rsi, main = "RSI 15 days", xlab = "time", ylab = "RSI: 15days")
plot(rsi, main = "RSI 20 days", xlab = "time", ylab = "RSI: 20days")
library(TTR)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
#sliderInput()
start_date <- "2019-10-01"
end_date <- "2019-12-31"
# start_date랑 end_date를 input으로 받아야지
time_range <- paste(start_date, "::", end_date, sep = "")
print(time_range)
prices_day_equity <- prices_day_equity[time_range]
rsi5 <- RSI(prices_day_equity$`MSCI ACWI`, n = 5)
rsi10 <- RSI(prices_day_equity$`MSCI ACWI`, n = 10)
rsi15 <- RSI(prices_day_equity$`MSCI ACWI`, n = 15)
rsi20 <- RSI(prices_day_equity$`MSCI ACWI`, n = 20)
par(mfrow = c(2, 2))
plot(rsi5, main = "RSI 5 days", xlab = "time", ylab = "RSI: 5days")
plot(rsi10, main = "RSI 10 days", xlab = "time", ylab = "RSI: 10days")
plot(rsi15, main = "RSI 15 days", xlab = "time", ylab = "RSI: 15days")
plot(rsi20, main = "RSI 20 days", xlab = "time", ylab = "RSI: 20days")
library(TTR)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
#sliderInput()
start_date <- "2019-10-01"
end_date <- "2020-05-27"
# start_date랑 end_date를 input으로 받아야지
time_range <- paste(start_date, "::", end_date, sep = "")
print(time_range)
prices_day_equity <- prices_day_equity[time_range]
rsi5 <- RSI(prices_day_equity$`MSCI ACWI`, n = 5)
rsi10 <- RSI(prices_day_equity$`MSCI ACWI`, n = 10)
rsi15 <- RSI(prices_day_equity$`MSCI ACWI`, n = 15)
rsi20 <- RSI(prices_day_equity$`MSCI ACWI`, n = 20)
par(mfrow = c(2, 2))
plot(rsi5, main = "RSI 5 days", xlab = "time", ylab = "RSI: 5days")
plot(rsi10, main = "RSI 10 days", xlab = "time", ylab = "RSI: 10days")
plot(rsi15, main = "RSI 15 days", xlab = "time", ylab = "RSI: 15days")
plot(rsi20, main = "RSI 20 days", xlab = "time", ylab = "RSI: 20days")
library(TTR)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
#sliderInput()
start_date <- "2020-01-01"
end_date <- "2020-05-27"
# start_date랑 end_date를 input으로 받아야지
time_range <- paste(start_date, "::", end_date, sep = "")
print(time_range)
prices_day_equity <- prices_day_equity[time_range]
rsi5 <- RSI(prices_day_equity$`MSCI ACWI`, n = 5)
rsi10 <- RSI(prices_day_equity$`MSCI ACWI`, n = 10)
rsi15 <- RSI(prices_day_equity$`MSCI ACWI`, n = 15)
rsi20 <- RSI(prices_day_equity$`MSCI ACWI`, n = 20)
par(mfrow = c(2, 2))
plot(rsi5, main = "RSI 5 days", xlab = "time", ylab = "RSI: 5days")
plot(rsi10, main = "RSI 10 days", xlab = "time", ylab = "RSI: 10days")
plot(rsi15, main = "RSI 15 days", xlab = "time", ylab = "RSI: 15days")
plot(rsi20, main = "RSI 20 days", xlab = "time", ylab = "RSI: 20days")
prices_day_equity <- readRDS("equity_compact_daily.RDS")
str(prices_day_equity)
prices_day_equity <- as.data.frame(readRDS("equity_compact_daily.RDS"))
str(prices_day_equity)
head(prices_day_equity)
head(df)
df
head(df)
df
head(prices_day_equity,2)
head(melt(prices_day_equity),2)
head(melt(prices_day_equity),10)
index(melt(prices_day_equity),10)
head(index(melt(prices_day_equity),10),5)
ex <- melt(prices_day_equity),10
ex <- melt(prices_day_equity)
ex
View(ex)
df
str(prices_day_equity)
prices_day_equity
index(prices_day_equity)
prices_day_equity$index
prices_day_equity$`MSCI Japan USD`
str(prices_day_equity$`MSCI ACWI`)
str(prices_day_equity)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
str(prices_day_equity)
head(prices_day_equity)
# read RDS
rets_month_equity <- readRDS("equity_compact_monthlyReturn.RDS")
rets_month_equity
str(rets_month_equity)
equity_compact <- read_excel("ac_assets.xlsx", sheet = "equity_compact", col_names = FALSE, skip = 14, col_types = c("date", rep("numeric",8)))
save.image()
save.image()
save.image()
