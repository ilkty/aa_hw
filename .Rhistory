min = as.POSIXct("2016-01-24","%Y-%m-%d"),
max = as.POSIXct("2016-04-02","%Y-%m-%d"),
value = c(as.POSIXct("2016-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
color <- c("#765285","#D1A827","#709FB0", "#849974", "#A0C1B8")
due <- c(as.POSIXct("2016-01-25 UTC"), as.POSIXct("2016-02-01 UTC"),
as.POSIXct("2016-02-15 UTC"), as.POSIXct("2016-02-22 UTC"),
as.POSIXct("2016-02-29 UTC"), as.POSIXct("2016-03-07 UTC"),
as.POSIXct("2016-03-14 UTC"), as.POSIXct("2016-03-21 UTC"),
as.POSIXct("2016-03-28 UTC"))
output$lines <- renderPlot({
resource_day_sum %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, sum, group = resource, colour = resource)) +
geom_line(alpha = 0.9, size = 0.65) +
scale_x_datetime(breaks = seq(as.POSIXct("2016-01-26 UTC"), as.POSIXct("2016-04-02 UTC"), "7 days"), date_labels = "%b %d") +
geom_vline(xintercept = due, alpha = 0.6, size = 0.65, colour = "grey55") +
scale_colour_manual(values = color, name = "Resource") +
labs(title = "Time Spent Online Learning", x = "Date", y = "Total Minutes per Day")
})
}
shinyApp(ui = ui, server = server)
# prices_day_equity <- readRDS("equity_compact_daily.RDS")
load("resource_day_sum")
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2016-01-24","%Y-%m-%d"),
max = as.POSIXct("2016-04-02","%Y-%m-%d"),
value = c(as.POSIXct("2016-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
color <- c("#765285","#D1A827","#709FB0", "#849974", "#A0C1B8")
due <- c(as.POSIXct("2016-01-25 UTC"), as.POSIXct("2016-02-01 UTC"),
as.POSIXct("2016-02-15 UTC"), as.POSIXct("2016-02-22 UTC"),
as.POSIXct("2016-02-29 UTC"), as.POSIXct("2016-03-07 UTC"),
as.POSIXct("2016-03-14 UTC"), as.POSIXct("2016-03-21 UTC"),
as.POSIXct("2016-03-28 UTC"))
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, sum, group = resource, colour = resource)) +
geom_line(alpha = 0.9, size = 0.65) +
scale_x_datetime(breaks = seq(as.POSIXct("2016-01-26 UTC"), as.POSIXct("2016-04-02 UTC"), "7 days"), date_labels = "%b %d") +
geom_vline(xintercept = due, alpha = 0.6, size = 0.65, colour = "grey55") +
scale_colour_manual(values = color, name = "Resource") +
labs(title = "Time Spent Online Learning", x = "Date", y = "Total Minutes per Day")
})
}
shinyApp(ui = ui, server = server)
head(prices_day_equity,2)
a <- melt(prices_day_equity)
library(reshape2)
a <- melt(prices_day_equity)
a
head(a)
plot(a)
summarya
head(a)
summary(a)
prices_day_equity
head(prices_day_equity)
dim(a)
str(a)
str(prices_day_equity)
a <- melt(data.frame(prices_day_equity))
a<-data.frame(prices_day_equity)
a
heaD(a)
head(s)
head(a)
str(a)
str(prices_day_equity)
a
class(a)
str(a)
head(melt(a))
tail(melt(a))
b <- melt(a)
tail(b)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2016-01-24","%Y-%m-%d"),
max = as.POSIXct("2016-04-02","%Y-%m-%d"),
value = c(as.POSIXct("2016-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
color <- c("#765285","#D1A827","#709FB0", "#849974", "#A0C1B8")
due <- c(as.POSIXct("2016-01-25 UTC"), as.POSIXct("2016-02-01 UTC"),
as.POSIXct("2016-02-15 UTC"), as.POSIXct("2016-02-22 UTC"),
as.POSIXct("2016-02-29 UTC"), as.POSIXct("2016-03-07 UTC"),
as.POSIXct("2016-03-14 UTC"), as.POSIXct("2016-03-21 UTC"),
as.POSIXct("2016-03-28 UTC"))
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable, colour = variable)) +
geom_line(alpha = 0.9, size = 0.65) +
scale_x_datetime(breaks = seq(as.POSIXct("2016-01-26 UTC"), as.POSIXct("2016-04-02 UTC"), "7 days"), date_labels = "%b %d")
})
}
shinyApp(ui = ui, server = server)
head(prices_day_equity)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
head(prices_day_equity)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2016-04-02","%Y-%m-%d"),
value = c(as.POSIXct("2016-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
color <- c("#765285","#D1A827","#709FB0", "#849974", "#A0C1B8")
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable, color = variable)) +
geom_line(alpha = 0.9, size = 0.65) +
scale_x_datetime(breaks = seq(as.POSIXct("2016-01-26 UTC"), as.POSIXct("2016-04-02 UTC"), "7 days"), date_labels = "%b %d")
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2016-04-02","%Y-%m-%d"),
value = c(as.POSIXct("2016-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27","%Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27","%Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
head(prices_day_equity)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date <= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
prices_day_equity <- readRDS("equity_compact_daily.RDS")
dim(prices_day_equity)
prices_day_equity <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
dim(prices_day_equity)
4530*8
40770*2
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity_melt <- melt(data.frame(date=index(prices_day_equity), coredata(prices_day_equity)))
head(prices_day_equity)
head(prices_day_equity_melt)
prices_day_equity_melt
View(prices_day_equity_melt)
View(prices_day_equity)
index(prices_day_equity
index(prices_day_equity)
prices_day_equity
df <- fortify(prices_day_equity)
df
View(df)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity)
View(prices_day_equity)
melt(prices_day_equity)
prices_day_equity
str(prices_day_equity)
prices_day_equity
str(prices_day_equity)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity$`MSCI ACWI`)
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct("2020-05-27"," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "70vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
getwd()
runApp('ex_dateSlider.R')
load("resource_day_sum")
library(shiny)
library(ggplot2)
library(dplyr)
load("resource_day_sum")
data(session)
today()
as.POSIXct(today())
as.POSIXct(today(), %y-%m)
as.POSIXct(today(), "%y-%m")
as.POSIXct(today(), "%y-%m-%d")
library(dplyr)
library(PerformanceAnalytics)
library(ggcorrplot)
library(DT)
library(lubridate)
library(shiny)
library(reshape2)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
prices_day_equity <- fortify(prices_day_equity$`MSCI ACWI`)
#load("resource_day_sum")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct(today()," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
server <- function(input, output) {
output$lines <- renderPlot({
prices_day_equity %>%
filter(date >= input$trajectory[1] & date <= input$trajectory[2]) %>%
ggplot(aes(date, value, group = variable))
})
}
shinyApp(ui = ui, server = server)
prices_day
prices_day_equity
head(prices_day_equity)
prices_day_equity <- readRDS("equity_compact_daily.RDS")
acwi <- fortify(prices_day_equity$`MSCI ACWI`)
head(acwi)
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31") %>%
ggpot(aes(date, value))
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31") %>%
ggplot(aes(date, value))
rlang::last_error()
rlang::last_trace()
acwi
acwi %>% filter(date>="2010-01-01"& date<="2019-12-31")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "trajectory",
label = "Date Range:",
min = as.POSIXct("2008-01-02","%Y-%m-%d"),
max = as.POSIXct(today()," %Y-%m-%d"),
value = c(as.POSIXct("2010-02-01"), as.POSIXct("2016-03-21")),
timeFormat="%Y-%m-%d", step = 1)),
mainPanel(plotOutput(outputId = "lines", height = "10vh")))
)
min = as.POSIXct("2008-01-02","%Y-%m-%d")
warnings()
max = as.POSIXct(today()," %Y-%m-%d")
acwi %>% filter(date >= min & date <= max)
max = as.POSIXct("2019-12-31"," %Y-%m-%d")
acwi %>% filter(date >= min & date <= max)
library(data.table)
install.packages("data.table")
library(data.table)
data(session)
head(session)
install.packages("reconstructr")
library(reconstructr)
data("session_dataset")
View(session_dataset)
data("session")
data()
library(data.table)
data(data.table)
data("data.table")
library(session)
install.packages("session")
data(session)
data(session::capture())
data(dplyr::session)
session_dataset
session::save.session()
summary(sseion)
summary(session_dataset)
session
save.image()
