library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
#titlePanel과 sidebarPanel, mainPanal
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
sidebarPanel(position = "left",
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date()
),
mainPanel(
# Show a plot of the trend
plotOutput("plot01")
)
)
),
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_df <- as.data.frame(filtered_df)
output$plot01 <- renderPlot({
ggcorrplot(filtered_df) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
},
options = list(height = 800)
)
library(TTR)
library(xts)
library(PerformanceAnalytics)
library(ggcorrplot)
library(dplyr)
library(shiny)
library(readxl)
library(ggplot2)
library(lubridate)
library(corrplot)
library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
#titlePanel과 sidebarPanel, mainPanal
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
sidebarPanel(position = "left",
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date()
),
mainPanel(
# Show a plot of the trend
plotOutput("plot01")
)
)
),
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_df <- as.data.frame(filtered_df)
output$plot01 <- renderPlot({
ggcorrplot(filtered_df) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
},
options = list(height = 800)
)
library(TTR)
library(xts)
library(PerformanceAnalytics)
library(ggcorrplot)
library(dplyr)
library(shiny)
library(readxl)
library(ggplot2)
library(lubridate)
library(corrplot)
library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
#titlePanel과 sidebarPanel, mainPanal
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
sidebarPanel(position = "left",
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date()
),
mainPanel(
# Show a plot of the trend
plotOutput("plot01")
)
)
),
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_df <- as.data.frame(filtered_df)
output$plot01 <- renderPlot({
ggcorrplot(filtered_df) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
},
options = list(height = 500)
)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
makeReactiveBinding("cross_A")
library(TTR)
library(xts)
library(PerformanceAnalytics)
library(ggcorrplot)
library(dplyr)
library(shiny)
library(readxl)
library(ggplot2)
library(lubridate)
library(corrplot)
library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
shinyApp(
library(shiny)
library(rCharts)
`data <- eventReactive(input$go,  { rnorm(input$num) })`에서 `input$num` 반응값 변경에 즉시 반응하는 것이 아니라,
`eventReactive()` 반응 지연 함수가 실행될 때 비로소 `renderPlot()`에 값을 전달하여 출력결과를 실행한다.
library(shiny)
library(rCharts)
``` {r shiny-dev-workflow-reactive}
shinyApp(
shinyApp(
rating <- c(2, 3, 5, 4, 1, 5, 3, 1, 4)
date_time <- c("2015-05-14", "2015-05-07", "2015-05-06", "2015-04-11", "2015-01-07", "2014-12-06", "2014-04-11", "2014-01-07", "2013-12-06")
shinyApp(
rating <- c(2, 3, 5, 4, 1, 5, 3, 1, 4)
date_time <- c("2015-05-14", "2015-05-07", "2015-05-06", "2015-04-11", "2015-01-07", "2014-12-06", "2014-04-11", "2014-01-07", "2013-12-06")
`data <- eventReactive(input$go,  { rnorm(input$num) })`에서 `input$num` 반응값 변경에 즉시 반응하는 것이 아니라,
`eventReactive()` 반응 지연 함수가 실행될 때 비로소 `renderPlot()`에 값을 전달하여 출력결과를 실행한다.
library(shiny)
library(rCharts)
rating <- c(2, 3, 5, 4, 1, 5, 3, 1, 4)
date_time <- c("2015-05-14", "2015-05-07", "2015-05-06", "2015-04-11", "2015-01-07", "2014-12-06", "2014-04-11", "2014-01-07", "2013-12-06")
repliesOnly <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
data <- data.frame(rating, date_time, repliesOnly)
data$rating <- as.character(data$rating)
``` {r shiny-dev-workflow-reactive}
library(shiny)
library(rCharts)
rating <- c(2, 3, 5, 4, 1, 5, 3, 1, 4)
date_time <- c("2015-05-14", "2015-05-07", "2015-05-06", "2015-04-11", "2015-01-07", "2014-12-06", "2014-04-11", "2014-01-07", "2013-12-06")
repliesOnly <- c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
data <- data.frame(rating, date_time, repliesOnly)
data$rating <- as.character(data$rating)
library(shiny)
library(rCharts)
install.packages("rCharts")
version
> ###
>
>
>
library(shiny)
library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
``` {r shiny-dev-workflow, eval=FALSE}
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot1 <- ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
},
options = list(height = 400)
)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot1 <- ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
},
options = list(height = 400)
)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot1 <- ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
}#,
#options = list(height = 400)
)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot1 <- ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
}#,
#options = list(height = 400)
)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$hist <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
}#,
#options = list(height = 400)
)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$hist <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(xts)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$hist <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$hist <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
head(cross_A)
cor(cross_A)
corrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE) %>% na.omit
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A, OHLC = FALSE) %>% na.omit #indexAt = "lastOf",
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A) %>% na.omit #indexAt = "lastOf", OHLC = FALSE
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A, OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
