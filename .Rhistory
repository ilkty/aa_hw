ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "lower", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
cross_A <- readRDS("cross_assets.RDS")
str(across_A)
str(cross_A)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "lower", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01")
plotOutput("plot02")
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
ggplot(cross_A, aes(x = time, y = price))
+ geom_line(aes(color = supp))
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
ggplot(cross_A, aes(x = time, y = price)) + geom_line(aes(color = supp))
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
ggplot(cross_A, aes(x = time, y = price)) + geom_line(aes(color = cross_A))
})
},
options = list(height = 400)
)
head(cross)
head(cross_a)
head(cross_A)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
ggplot(cross_A, aes(x = time, y = MSCI ACWI)) + geom_line(aes(color = cross_A))
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
plot(cross_A)
})
},
options = list(height = 400)
)
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
plot(cross_A$`MSCI ACWI`,cross_A$`U.S. Treasury`)
})
},
options = list(height = 400)
)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A_r <- Return.calculate(cross_A, method = "log") %>% na.omit
cross_A <- data.frame(date=index(cross_A), coredata(cross_A))
cross_A_r <- data.frame(date=index(cross_A_r), coredata(cross_A_r))
# Define UI for application
ui <- fluidPage(
# Application title
#titlePanel("Stock Financials Trend"),
# Sidebar with slider input to select date range
sidebarLayout(position = "left",
sidebarPanel(
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date())),
mainPanel(
# Show a plot of the trend
plotOutput("plot01"),
plotOutput("plot02")
)
)
)
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_cross_A_r <- reactive({
cross_A_r %>%
filter(between(date, input$days[1], input$days[2]))
})
output$plot01 <- renderPlot({
ggplot(filtered_df(), aes_string(x = "date", y = "MSCI.ACWI")) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
output$plot02 <- renderPlot({
ggplot(filtered_cross_A_r(), aes_string(x = "date", y = "MSCI.ACWI")) + geom_line() + geom_point() + ggtitle("ACWI plot")
#ggcorrplot(filtered_cross_A_r[,-1])
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
colnames(ross_A)
colnames(cross_A)
runApp('~/aa_hw')
runApp('~/aa_hw')
melt(cross_A)
head(melt(cross_A))
tail(melt(cross_A))
plot(melt(cross_A))
plot(melt(cross_A[,-1]))
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
a<-melt(filtered_df()[,-1])
a<-melt(cross_A[,-1])
a
a<-melt(cross_A[,-1])
plot(a)
a
runApp('~/aa_hw')
library(quantmod)
library(shiny)
library(ggcorrplot)
library(PerformanceAnalytics)
shinyApp(
ui <- fluidPage(
titlePanel("상관관계 테이블"),
mainPanel(
plotOutput("plot01"),
plotOutput("plot02")
)
),
server <- function(input, output) {
cross_A <- readRDS("cross_assets.RDS")
cross_A_m <- to.monthly(as.xts(cross_A), OHLC = FALSE) %>% na.omit #indexAt = "lastOf"
cross_A_m_r <- Return.calculate(cross_A_m, method = "log") %>% na.omit
output$plot01 <- renderPlot({
ggcorrplot(cor(cross_A_m_r),hc.order = TRUE, type = "upper", lab = TRUE, digits = 2)
})
output$plot02 <- renderPlot({
plot(cross_A[])
})
},
options = list(height = 400)
)
library(TTR)
library(xts)
library(PerformanceAnalytics)
library(ggcorrplot)
library(dplyr)
library(shiny)
library(readxl)
library(ggplot2)
library(lubridate)
library(corrplot)
library(ggcorrplot)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A <- Return.calculate(cross_A, method = "log") %>% na.omit
#titlePanel과 sidebarPanel, mainPanal
shinyApp(
ui <- fluidPage(
titlePanel("Correlation table w/ time window"),
sidebarPanel(position = "left",
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date()
),
mainPanel(
# Show a plot of the trend
plotOutput("plot01")
)
)
),
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_df <- as.data.frame(filtered_df)
output$plot01 <- renderPlot({
ggcorrplot(filtered_df) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
},
options = list(height = 500)
)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_assets
head(cross_assets)
head(cross_assets_m)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_assets <- readRDS("cross_assets.RDS") %>% na.omit
head(cross_assets)
runApp('~/aa_hw')
str(cross_assets)
head(cross_assets)
runApp('~/aa_hw')
runApp('~/aa_hw')
library(TTR)
cross_assets <- as.data.frame(cross_assets)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
View(cross_assets)
View(cross_assets)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_assets <- readRDS("cross_assets.RDS") %>% na.omit
cross_assets_m <- to.monthly(cross_assets, indexAt = "lastOf", OHLC = FALSE)
df_cross_assets <- as.data.frame(cross_assets_m)
str(df_cross_assets9
str(df_cross_assets)
runApp('~/aa_hw')
head(cross_assets)
plot(melt(cross_assets[],-1]))
plot(melt(cross_assets[,-1]))
plot(melt(cross_assets_m[,-1]))
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_assets <- readRDS("cross_assets.RDS") %>% na.omit
head(cross_assets)
str(cross_assets)
index(cross_assets)
runApp('~/aa_hw')
shinyApp(
ui <- fluidPage(
actionButton(inputId = "norm", label = "Normal"),
actionButton(inputId = "unif", label = "Uniform"),
plotOutput("hist")
),
server <- function(input, output) {
rv <- reactiveValues(data = rnorm(100))
observeEvent(input$norm, { rv$data <- rnorm(100) })
observeEvent(input$unif, { rv$data <- runif(100) })
output$hist <- renderPlot({
hist(rv$data)
})
},
options = list(height = 600)
)
runApp('~/aa_hw')
str(cross_assets)
a <- as.data.frame(cross_assets)
a
str(a)
a
head(a)
index(a)
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A_r <- Return.calculate(cross_A, method = "log") %>% na.omit
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
index(cross_A)
cross_assets <- readRDS("cross_assets.RDS") %>% na.omit
cross_assets_m <- to.monthly(cross_assets, indexAt = "lastOf", OHLC = FALSE)
index(cross_assets)
cross_assets <- readRDS("cross_assets.RDS") %>% na.omit
df_cross_assets <- data.frame(date=index(cross_assets), coredata(cross_assets))
head(df_cross_assets)
runApp('~/aa_hw')
runApp('~/aa_hw')
head(df_cross_assets)
melt(df_cross_assets)
head(df_cross_assets)
head(melt(df_cross_assets))
tail(melt(df_cross_assets))
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
cross_A <- readRDS("cross_assets.RDS")
cross_A <- to.monthly(cross_A,indexAt = "lastOf", OHLC = FALSE)
cross_A_r <- Return.calculate(cross_A, method = "log") %>% na.omit
cross_A <- data.frame(date=index(cross_A), coredata(cross_A))
cross_A_r <- data.frame(date=index(cross_A_r), coredata(cross_A_r))
# Define UI for application
ui <- fluidPage(
# Application title
#titlePanel("Stock Financials Trend"),
# Sidebar with slider input to select date range
sidebarLayout(position = "left",
sidebarPanel(
dateRangeInput('days', 'Select a date range:',
start = Sys.Date() - 365,
end = Sys.Date(),
max = Sys.Date())),
mainPanel(
# Show a plot of the trend
plotOutput("plot01"),
plotOutput("plot02")
)
)
)
server <- function(input, output) {
filtered_df <- reactive({
cross_A %>%
filter(between(date, input$days[1], input$days[2]))
})
filtered_cross_A_r <- reactive({
cross_A_r %>%
filter(between(date, input$days[1], input$days[2]))
})
output$plot01 <- renderPlot({
ggplot(filtered_df(), aes_string(x = "date", y = "MSCI.ACWI")) + geom_line() + geom_point() + ggtitle("ACWI plot")
})
output$plot02 <- renderPlot({
ggplot(filtered_cross_A_r(), aes_string(x = "date", y = "MSCI.ACWI")) + geom_line() + geom_point() + ggtitle("ACWI plot")
#ggcorrplot(filtered_cross_A_r[,-1])
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
runApp('~/aa_hw')
